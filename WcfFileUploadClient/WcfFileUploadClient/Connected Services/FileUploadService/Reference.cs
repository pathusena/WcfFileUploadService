//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfFileUploadClient.FileUploadService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileInfo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class FileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string filePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string filePath {
            get {
                return this.filePathField;
            }
            set {
                if ((object.ReferenceEquals(this.filePathField, value) != true)) {
                    this.filePathField = value;
                    this.RaisePropertyChanged("filePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileUploadService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFile", ReplyAction="http://tempuri.org/IService/UploadFileResponse")]
        void UploadFile(System.IO.Stream fileStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFile", ReplyAction="http://tempuri.org/IService/UploadFileResponse")]
        System.Threading.Tasks.Task UploadFileAsync(System.IO.Stream fileStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFileInfo", ReplyAction="http://tempuri.org/IService/UploadFileInfoResponse")]
        void UploadFileInfo(WcfFileUploadClient.FileUploadService.FileInfo fileInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UploadFileInfo", ReplyAction="http://tempuri.org/IService/UploadFileInfoResponse")]
        System.Threading.Tasks.Task UploadFileInfoAsync(WcfFileUploadClient.FileUploadService.FileInfo fileInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFileList", ReplyAction="http://tempuri.org/IService/GetFileListResponse")]
        WcfFileUploadClient.FileUploadService.FileInfo[] GetFileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFileList", ReplyAction="http://tempuri.org/IService/GetFileListResponse")]
        System.Threading.Tasks.Task<WcfFileUploadClient.FileUploadService.FileInfo[]> GetFileListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WcfFileUploadClient.FileUploadService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<WcfFileUploadClient.FileUploadService.IService>, WcfFileUploadClient.FileUploadService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UploadFile(System.IO.Stream fileStream) {
            base.Channel.UploadFile(fileStream);
        }
        
        public System.Threading.Tasks.Task UploadFileAsync(System.IO.Stream fileStream) {
            return base.Channel.UploadFileAsync(fileStream);
        }
        
        public void UploadFileInfo(WcfFileUploadClient.FileUploadService.FileInfo fileInfo) {
            base.Channel.UploadFileInfo(fileInfo);
        }
        
        public System.Threading.Tasks.Task UploadFileInfoAsync(WcfFileUploadClient.FileUploadService.FileInfo fileInfo) {
            return base.Channel.UploadFileInfoAsync(fileInfo);
        }
        
        public WcfFileUploadClient.FileUploadService.FileInfo[] GetFileList() {
            return base.Channel.GetFileList();
        }
        
        public System.Threading.Tasks.Task<WcfFileUploadClient.FileUploadService.FileInfo[]> GetFileListAsync() {
            return base.Channel.GetFileListAsync();
        }
    }
}
